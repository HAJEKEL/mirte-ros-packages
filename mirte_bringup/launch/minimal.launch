<launch>

    <!-- Load parameters that match the correct
         mcu connections -->
    <group ns="mirte">
        <rosparam file="$(find mirte_telemetrix)/config/mirte_user_config.yaml"/>
    </group>

    <!-- Telemetrix node to start all services and topics
         for the sensors and actuators connected to the
         mcu -->
    <node name="mirte_telemetrix_mirte" output="screen"
          pkg="mirte_telemetrix"
          type="ROS_telemetrix_aio_api.py"
          respawn="true"/>

    <!-- ROS control hardware interface for differential
         drive robot. -->
    <!-- Commented out because of ridgeback
    <node name="mirte_base_node" output="screen"
          pkg="mirte_control"
          type="mirte_control_node"/>
    -->
    <!-- ROS control hardware interface for 4wheel mechanum 
         drive robot. -->
    <!--Load Control Configuration:-->
     <rosparam command="load" file="$(find mirte_control)/config/control.yaml" />
    <!--This node starts the necessary controllers.-->
     <node name="controller_spawner" pkg="controller_manager" type="spawner" args="ridgeback_joint_publisher ridgeback_velocity_controller" />
    <!--Manages velocity commands. Modify cmd_vel_out remap if needed.-->
     <node pkg="twist_mux" type="twist_mux" name="twist_mux">
       <rosparam command="load" file="$(find ridgeback_control)/config/twist_mux.yaml" />
       <remap from="cmd_vel_out" to="ridgeback_velocity_controller/cmd_vel"/>
     </node>

    <!-- <node name="my_robot_camera"
          pkg="mirte_ros_package"
          type="camera.py" output="screen"/> -->

    <!-- <node name="mirte_navigation"
          pkg="mirte_ros_package"
          type="navigation.py" output="screen"/> -->

    <!-- Load controller config -->
    <!-- Commented out because of ridgeback
    <rosparam command="load" file="$(find mirte_control)/config/my_robot_common.yaml"/>

    <node name="controller_spawner"
          pkg="controller_manager"
          type="spawner"
          output="screen"
          args="mobile_base_controller"/>
    -->
    <!-- Start the websocket server -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
      <arg name="websocket_external_port" value="80"/>
    </include>


  <!-- TODO: openCV bridge -->
  <node name="webcam" pkg="usb_cam" type="usb_cam_node">
     <param name="pixel_format" value="yuyv"/>
  </node>


  <node name="web_video_server" pkg="web_video_server" type="web_video_server">
    <param name="default_transport" value="theora"/>
    <param name="port" value="8181"/>
  </node>


</launch>
